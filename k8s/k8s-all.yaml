apiVersion: v1
kind: Namespace
metadata: { name: week10 }
---
# Product DB
apiVersion: apps/v1
kind: Deployment
metadata: { name: product-db, namespace: week10 }
spec:
  replicas: 1
  selector: { matchLabels: { app: product-db } }
  template:
    metadata: { labels: { app: product-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - { name: POSTGRES_DB,   value: "products" }
            - { name: POSTGRES_USER, value: "postgres" }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: pg-secrets, key: POSTGRES_PASSWORD } }
          ports: [ { containerPort: 5432 } ]
---
apiVersion: v1
kind: Service
metadata: { name: product-db-service-w09-aks, namespace: week10 }
spec:
  type: ClusterIP
  selector: { app: product-db }
  ports: [ { port: 5432, targetPort: 5432 } ]
---
# Order DB
apiVersion: apps/v1
kind: Deployment
metadata: { name: order-db, namespace: week10 }
spec:
  replicas: 1
  selector: { matchLabels: { app: order-db } }
  template:
    metadata: { labels: { app: order-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - { name: POSTGRES_DB,   value: "orders" }
            - { name: POSTGRES_USER, value: "postgres" }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: pg-secrets, key: POSTGRES_PASSWORD } }
          ports: [ { containerPort: 5432 } ]
---
apiVersion: v1
kind: Service
metadata: { name: order-db-service-w09-aks, namespace: week10 }
spec:
  type: ClusterIP
  selector: { app: order-db }
  ports: [ { port: 5432, targetPort: 5432 } ]
---
# Product Service
apiVersion: apps/v1
kind: Deployment
metadata: { name: product-service-w09-aks, namespace: week10 }
spec:
  replicas: 1
  selector: { matchLabels: { app: product-service } }
  template:
    metadata: { labels: { app: product-service } }
    spec:
      containers:
        - name: product-service
          image: josephsabanaacr.azurecr.io/product-service:latest
          env:
            - { name: POSTGRES_HOST, value: product-db-service-w09-aks }
            - { name: AZURE_SAS_TOKEN_EXPIRY_HOURS, value: "24" }
            - name: AZURE_STORAGE_ACCOUNT_NAME
              valueFrom: { secretKeyRef: { name: storage-secret, key: AZURE_STORAGE_ACCOUNT_NAME } }
            - name: AZURE_STORAGE_ACCOUNT_KEY
              valueFrom: { secretKeyRef: { name: storage-secret, key: AZURE_STORAGE_ACCOUNT_KEY } }
            - { name: AZURE_STORAGE_CONTAINER_NAME, value: week10storage }
          ports: [ { containerPort: 8000 } ]
          readinessProbe: { httpGet: { path: /health, port: 8000 }, initialDelaySeconds: 5, periodSeconds: 10 }
          livenessProbe:  { httpGet: { path: /health, port: 8000 }, initialDelaySeconds: 15, periodSeconds: 20 }
---
apiVersion: v1
kind: Service
metadata: { name: product-service-w09-aks, namespace: week10 }
spec:
  type: LoadBalancer
  selector: { app: product-service }
  ports: [ { port: 8000, targetPort: 8000 } ]
---
# Order Service
apiVersion: apps/v1
kind: Deployment
metadata: { name: order-service-w09-aks, namespace: week10 }
spec:
  replicas: 1
  selector: { matchLabels: { app: order-service } }
  template:
    metadata: { labels: { app: order-service } }
    spec:
      containers:
        - name: order-service
          image: josephsabanaacr.azurecr.io/order-service:latest
          env:
            - { name: POSTGRES_HOST, value: order-db-service-w09-aks }
            - { name: PRODUCT_SERVICE_URL, value: http://product-service-w09-aks.week10.svc.cluster.local:8000 }
          ports: [ { containerPort: 8000 } ]
          readinessProbe: { httpGet: { path: /health, port: 8000 }, initialDelaySeconds: 5, periodSeconds: 10 }
          livenessProbe:  { httpGet: { path: /health, port: 8000 }, initialDelaySeconds: 15, periodSeconds: 20 }
---
apiVersion: v1
kind: Service
metadata: { name: order-service-w09-aks, namespace: week10 }
spec:
  type: LoadBalancer
  selector: { app: order-service }
  ports: [ { port: 8000, targetPort: 8000 } ]  # external 8001 â†’ container 8000
---
# Frontend (Nginx serving the built app)
apiVersion: apps/v1
kind: Deployment
metadata: { name: frontend-w09-aks, namespace: week10 }
spec:
  replicas: 1
  selector: { matchLabels: { app: frontend } }
  template:
    metadata: { labels: { app: frontend } }
    spec:
      containers:
        - name: frontend
          image: josephsabanaacr.azurecr.io/frontend:latest
          ports: [ { containerPort: 80 } ]
---
apiVersion: v1
kind: Service
metadata: { name: frontend-w09-aks, namespace: week10 }
spec:
  type: LoadBalancer
  selector: { app: frontend }
  ports: [ { port: 80, targetPort: 80 } ]
---

